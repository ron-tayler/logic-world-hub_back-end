generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  output          = "./generated/lwh"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  nick       String   @db.Text
  createDate DateTime @default(now()) @db.DateTime(0)
  is_active  Boolean  @default(false)
  avatar     String   @default("") @db.VarChar(255)

  UserAuth        User_Auth?
  ModsCollections Mods_Collection[]
  ModAuthors      Mod_Author[]
  ModIssues       Mod_Issue[]
  ModIssuePosts   Mod_Issue_Post[]
  ModsLists       Mods_List[]
  ModsFavorits    Mods_Favorits[]
  ModSubscribers  Mod_Subscribers[]
  ModDownloads    Mod_Download[]
  UserSession     User_Session[]
}

model User_Auth {
  userId    Int     @unique
  email     String  @unique @db.VarChar(100)
  password  String  @db.VarChar(100)
  is_active Boolean

  User User @relation(fields: [userId], references: [id])
}

model Mods_Collection {
  id          Int      @id @default(autoincrement())
  avatar      String   @db.VarChar(255)
  name        String   @db.VarChar(100)
  description String   @db.Text
  createDate  DateTime @default(now())
  is_active   Boolean  @default(false)
  author_id   Int

  Author User  @relation(fields: [author_id], references: [id])
  Mods   Mod[]
}

model Mod {
  id               Int      @id @default(autoincrement())
  avatar           String   @db.VarChar(255)
  name             String   @db.VarChar(100)
  description      String   @db.Text
  createDate       DateTime @default(now())
  is_active        Boolean  @default(false)
  collection_id    Int
  views            Int
  readme_type      Int
  readme           String   @db.Text
  change_list_type Int
  change_list      String   @db.Text
  repository       String   @db.VarChar(255)
  docs_url         String   @db.VarChar(255)

  Collection  Mods_Collection   @relation(fields: [collection_id], references: [id])
  Images      Mod_Image[]
  Authors     Mod_Author[]
  Tags        Mod_Tag[]
  Versions    Mod_Version[]
  Lists       Mods_List[]
  Issues      Mod_Issue[]
  Favorits    Mods_Favorits[]
  Subscribers Mod_Subscribers[]
  Downloads   Mod_Download[]
}

model Mod_Author {
  mod_id  Int
  user_id Int
  type    Int

  User User @relation(fields: [user_id], references: [id])
  Mod  Mod  @relation(fields: [mod_id], references: [id])

  @@unique([mod_id, user_id])
}

model Mod_Image {
  id     Int    @id @default(autoincrement())
  mod_id Int
  url    String @db.VarChar(255)

  Mod Mod @relation(fields: [mod_id], references: [id])
}

model Mod_Tag {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  Mod Mod[]
}

model Mod_Version {
  id           Int      @id @default(autoincrement())
  mod_id       Int
  version      String   @db.VarChar(30)
  game_version String   @db.VarChar(30)
  releaseDate  DateTime @default(now())

  Mod       Mod            @relation(fields: [mod_id], references: [id])
  Downloads Mod_Download[]
}

enum Mod_Issue_Type {
  GENERAL
  BUGS
  ANNOUNCEMENTS
  IDEAS
}

model Mod_Issue {
  id         Int            @id @default(autoincrement())
  mod_id     Int
  name       String         @db.VarChar(100)
  type       Mod_Issue_Type
  author_id  Int
  createDate DateTime       @default(now())

  Mod          Mod              @relation(fields: [mod_id], references: [id])
  Author       User             @relation(fields: [author_id], references: [id])
  ModIssuePost Mod_Issue_Post[]
}

model Mod_Issue_Post {
  id         Int      @id @default(autoincrement())
  issue_id   Int
  author_id  Int
  createDate DateTime @default(now())
  text       String   @db.Text

  Issue  Mod_Issue @relation(fields: [issue_id], references: [id])
  Author User      @relation(fields: [author_id], references: [id])
}

model Mods_List {
  id        Int     @id @default(autoincrement())
  author_id Int
  is_public Boolean
  name      String  @db.VarChar(100)

  Author User  @relation(fields: [author_id], references: [id])
  Mods   Mod[]
}

model Mods_Favorits {
  user_id Int
  mod_id  Int

  User User @relation(fields: [user_id], references: [id])
  Mod  Mod  @relation(fields: [mod_id], references: [id])

  @@unique([mod_id, user_id])
}

model Mod_Subscribers {
  user_id Int
  mod_id  Int

  User User @relation(fields: [user_id], references: [id])
  Mod  Mod  @relation(fields: [mod_id], references: [id])

  @@unique([mod_id, user_id])
}

model Mod_Download {
  user_id    Int
  mod_id     Int
  version_id Int

  User    User        @relation(fields: [user_id], references: [id])
  Mod     Mod         @relation(fields: [mod_id], references: [id], map: "ModDownload_mod_id_fkey")
  Version Mod_Version @relation(fields: [version_id], references: [id], map: "ModDownload_version_id_fkey")

  @@unique([user_id, mod_id])
  @@index([mod_id], map: "ModDownload_mod_id_fkey")
  @@index([version_id], map: "ModDownload_version_id_fkey")
}

enum User_Agent_Type {
  WEBKIT
  OPERA
  IE
  CHROME
  SAFARI
  MOBILE_SAFARI
  FIREFOX
  MOZILLA
  ANDROID
  OTHER
}

enum User_Agent_OS {
  WINDOWS
  LINUX
  IOS
  ANDROID
  OTHER
}

model User_Session {
  id              Int             @id @default(autoincrement())
  userId          Int
  userAgent       String          @db.Text
  userAgentType   User_Agent_Type
  userAgentOS     User_Agent_OS
  userAgentDevice String          @db.Text
  uuid            String          @db.VarChar(100)
  ipv4            String          @db.VarChar(30)
  fingerprint_id  String          @db.VarChar(30)
  is_active       Boolean         @default(false)

  User   User         @relation(fields: [userId], references: [id])
  Tokens User_Token[]
}

model User_Token {
  id              Int      @id @default(autoincrement())
  sessionId       Int
  access_token    String   @unique @db.VarChar(100)
  refresh_token   String   @unique @db.VarChar(100)
  createDate      DateTime @default(now()) @db.DateTime(0)
  is_enable       Boolean  @default(false)
  is_super_access Boolean  @default(false)

  Session User_Session @relation(fields: [sessionId], references: [id])
}
